[{"path":[]},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_1-purpose","dir":"","previous_headings":"","what":"1. Purpose","title":"Citizen Code of Conduct","text":"primary goal dod inclusive largest number contributors, varied diverse backgrounds possible. , committed providing friendly, safe welcoming environment , regardless gender, sexual orientation, ability, ethnicity, socioeconomic status, religion (lack thereof). code conduct outlines expectations participate community, well consequences unacceptable behavior. invite participate dod help us create safe positive experiences everyone.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_2-open-sourceculturetech-citizenship","dir":"","previous_headings":"","what":"2. Open [Source/Culture/Tech] Citizenship","title":"Citizen Code of Conduct","text":"supplemental goal Code Conduct increase open [source/culture/tech] citizenship encouraging participants recognize strengthen relationships actions effects community. Communities mirror societies exist positive action essential counteract many forms inequality abuses power exist society. see someone making extra effort ensure community welcoming, friendly, encourages participants contribute fullest extent, want know.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_3-expected-behavior","dir":"","previous_headings":"","what":"3. Expected Behavior","title":"Citizen Code of Conduct","text":"following behaviors expected requested community members: Participate authentic active way. , contribute health longevity community. Exercise consideration respect speech actions. Attempt collaboration conflict. Refrain demeaning, discriminatory, harassing behavior speech. mindful surroundings fellow participants. Alert community leaders notice dangerous situation, someone distress, violations Code Conduct, even seem inconsequential. Remember community event venues may shared members public; please respectful patrons locations.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_4-unacceptable-behavior","dir":"","previous_headings":"","what":"4. Unacceptable Behavior","title":"Citizen Code of Conduct","text":"following behaviors considered harassment unacceptable within community: Violence, threats violence violent language directed another person. Sexist, racist, homophobic, transphobic, ableist otherwise discriminatory jokes language. Posting displaying sexually explicit violent material. Posting threatening post people’s personally identifying information (“doxing”). Personal insults, particularly related gender, sexual orientation, race, religion, disability. Inappropriate photography recording. Inappropriate physical contact. someone’s consent touching . Unwelcome sexual attention. includes, sexualized comments jokes; inappropriate touching, groping, unwelcomed sexual advances. Deliberate intimidation, stalking following (online person). Advocating , encouraging, behavior. Sustained disruption community events, including talks presentations.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_5-weapons-policy","dir":"","previous_headings":"","what":"5. Weapons Policy","title":"Citizen Code of Conduct","text":"weapons allowed dod events, community spaces, spaces covered scope Code Conduct. Weapons include limited guns, explosives (including fireworks), large knives used hunting display, well item used purpose causing injury harm others. Anyone seen possession one items asked leave immediately, allowed return without weapon. Community members expected comply laws matter.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_6-consequences-of-unacceptable-behavior","dir":"","previous_headings":"","what":"6. Consequences of Unacceptable Behavior","title":"Citizen Code of Conduct","text":"Unacceptable behavior community member, including sponsors decision-making authority, tolerated. Anyone asked stop unacceptable behavior expected comply immediately. community member engages unacceptable behavior, community organizers may take action deem appropriate, including temporary ban permanent expulsion community without warning (without refund case paid event).","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_7-reporting-guidelines","dir":"","previous_headings":"","what":"7. Reporting Guidelines","title":"Citizen Code of Conduct","text":"subject witness unacceptable behavior, concerns, please notify community organizer soon possible. jaimie.harbin@dfo-mpo.gc.ca Additionally, community organizers available help community members engage local law enforcement otherwise help experiencing unacceptable behavior feel safe. context -person events, organizers also provide escorts desired person experiencing distress.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_8-addressing-grievances","dir":"","previous_headings":"","what":"8. Addressing Grievances","title":"Citizen Code of Conduct","text":"feel falsely unfairly accused violating Code Conduct, notify us concise description grievance. grievance handled accordance existing governing policies.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_9-scope","dir":"","previous_headings":"","what":"9. Scope","title":"Citizen Code of Conduct","text":"expect community participants (contributors, paid otherwise; sponsors; guests) abide Code Conduct community venues–online -person–well one--one communications pertaining community business. code conduct related procedures also applies unacceptable behavior occurring outside scope community activities behavior potential adversely affect safety well-community members.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_10-contact-info","dir":"","previous_headings":"","what":"10. Contact info","title":"Citizen Code of Conduct","text":"annie.howard.e@gmail.com","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"id_11-license-and-attribution","dir":"","previous_headings":"","what":"11. License and attribution","title":"Citizen Code of Conduct","text":"Citizen Code Conduct distributed Stumptown Syndicate Creative Commons Attribution-ShareAlike license. Portions text derived Django Code Conduct Geek Feminism Anti-Harassment Policy.","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Citizen Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Citizen Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Citizen Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Citizen Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Citizen Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team dan.kelley@dal.ca. Complaints reviewed investigated result response deemed necessary appropriate circumstances. project team pledges maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://dankelley.github.io/dod/CodeofConduct.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Citizen Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://dankelley.github.io/dod/articles/buoy.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Downloading buoy Data","text":"function dod.buoy can download buoy data Marine Environmental Data Section (MEDS).","code":""},{"path":"https://dankelley.github.io/dod/articles/buoy.html","id":"finding-desired-id","dir":"Articles","previous_headings":"","what":"Finding Desired ID","title":"Downloading buoy Data","text":"dod.buoy, ID MEDS code region interest list , name region can given:","code":""},{"path":"https://dankelley.github.io/dod/articles/buoy.html","id":"example-downloading-meds-data","dir":"Articles","previous_headings":"","what":"Example: Downloading MEDS Data","title":"Downloading buoy Data","text":"basic example shows download buoy data MEDS server.","code":"library(dod) dod.buoy(\"MEDS\", ID=\"East Scotian Slope\")"},{"path":"https://dankelley.github.io/dod/articles/dod_package.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Package Overview","text":"package created tool improve access various types oceanographic data open sources.","code":""},{"path":"https://dankelley.github.io/dod/articles/dod_package.html","id":"oceanographic-data-options","dir":"Articles","previous_headings":"","what":"Oceanographic Data Options","title":"Package Overview","text":"following table shows types data package currently downloads functions used : Expansion options welcomed.","code":""},{"path":"https://dankelley.github.io/dod/articles/dod_package.html","id":"development","dir":"Articles","previous_headings":"","what":"Development","title":"Package Overview","text":"Contributions dod package encouraged. basic structure function involves finding data source online use server containing many files constructing url function can download specific data.","code":""},{"path":"https://dankelley.github.io/dod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan Kelley. Author, maintainer. Annie Howard. Author. Jaimie Harbin. Author.","code":""},{"path":"https://dankelley.github.io/dod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelley D, Howard , Harbin J (2025). dod: Download Oceanographic Data. R package version 0.1.20, https://dankelley.github.io/dod/.","code":"@Manual{,   title = {dod: Download Oceanographic Data},   author = {Dan Kelley and Annie Howard and Jaimie Harbin},   year = {2025},   note = {R package version 0.1.20},   url = {https://dankelley.github.io/dod/}, }"},{"path":"https://dankelley.github.io/dod/index.html","id":"dod","dir":"","previous_headings":"","what":"Download Oceanographic Data","title":"Download Oceanographic Data","text":"goal dod make easier download various types oceanographic data common sources BATS, NOAA, MEDS, BBMP. similar functions exist oce package, intention retire dod matures, building oce difficult users, CRAN policies dictate frequent updates.","code":""},{"path":"https://dankelley.github.io/dod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download Oceanographic Data","text":"can install development version dod GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dankelley/dod\")"},{"path":"https://dankelley.github.io/dod/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Download Oceanographic Data","text":"following example shows (1) download index CTD data files resulting observations made part BBMP program present year (2) use functions oce package read plot first CTD profile year 2024.  PS. README.md file created 2025-08-11 rendering README.Rmd file devtools::build_readme().","code":"library(dod) library(oce) #> Loading required package: gsw # Note: cannot specify year=2025 because the URL is differently constructed index <- dod.ctd.bbmp.index(year = \"2024\") ctdFile <- dod.ctd.bbmp(year = index$year[1], ID = index$ID[1], direction = \"DN\") # Use oce to read, summarize and plot the data. ctd <- read.netcdf(ctdFile) |>     oceRename() |>     as.ctd() # Plot some biochemistry variables par(mfrow = c(2, 2)) plotProfile(ctd, \"SA\") plotProfile(ctd, \"CT\") plotProfile(ctd, \"oxygen\") plotProfile(ctd, \"chlorophyllA\")"},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"function downloads AMSR data.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"","code":"dod.amsr(   date = Sys.Date() - 4L,   destdir = \".\",   server = \"https://data.remss.com/amsr2/ocean/L3/v08.2\",   type = \"3day\",   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"date either Date object character time object can converted object .Date().  default four days prior present date, usually latest view can obtained, type \"3day\", default. destdir character giving destination directory (defaults \".\", present directory).  directory must exist. author usually sets \"~/data/amsr\", file central location. server character value indicating base server location. default value used unless data provider changes web scheme ... case, hoped users contact developers package can updated. type character value indicating get data.  may \"3day\" (default), composite covering 3 days observation, removes viewing-path cloud blanks, \"daily\" daily reading, \"weekly\" composite covering week, \"monthly\" composite covering month.  \"daily\" case, data arrays 3D, third dimension representing ascending descending traces, cases, arrays 2D. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"dod.amsr returns character value holding full pathname downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"works constructing URLs based arguments provided.  author unaware documentation specifies directory structure server, construction based examining server web browser.  Obviously, fragile approach lead failed downloads remote directory structure changes.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"historical-notes","dir":"Reference","previous_headings":"","what":"Historical notes","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"September 2024 dod.amsr() required 3 parameters specify time (year, month day). difficult use also led messy coding, 3 parameters replaced date. July 2023, dod.amsr() worked calling oce::download.amsr(). However, time, author noticed changes directory structure remote server, format data files. new directory structure addressed complete rewrite code within dod, severing connection oce function.","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.amsr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Advanced Microwave Scanning Radiometer data — dod.amsr","text":"","code":"if (interactive()) { # sidestep a pkgdown::build_site() error     library(\"oce\")     # Get temporary space (to obey CRAN rules)     destdir <- tempdir()     file <- dod.amsr(destdir = destdir)     natl <- read.amsr(file) |>         subset(-90 < longitude & longitude < 0) |>         subset(20 < latitude & latitude < 70)     plot(natl)     # Clean up space     unlink(destdir, recursive = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":null,"dir":"Reference","previous_headings":"","what":"Download buoy data — dod.buoy","title":"Download buoy data — dod.buoy","text":"function downloads buoy data various programs including, listed ‘Details’.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download buoy data — dod.buoy","text":"","code":"dod.buoy(program, ID = NULL, destdir = \".\", age = 1, debug = 0)"},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download buoy data — dod.buoy","text":"program argument specifying desired oceanographic program download buoy data . must either \"MEDS\" \"smartatlantic\". ID character value indicating ID instrument (see ‘Details’) destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download buoy data — dod.buoy","text":"index TRUE, program \"BBMP\" \"BATS\", return data frame.  Otherwise, return name downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download buoy data — dod.buoy","text":"program `\"MEDS\"', choices ID follows. \"Banquereau Bank\" \"East Scotian Slope\" \"Halifax\" \"Halifax DISCUS TriAx\" \"Halifax Harbour\" \"Laurentian Fan\" \"Minas Basin\" \"Port Hope\" \"Prince Edward Point\" \"Tail Bank\" program `\"smartatlantic\"', choices, buoys Atlantic Provinces, follows. \"h1\" buoy near Duncan Reef, Nova Scotia (see https://www.smartatlantic.ca/station_alt.html?id=halifax_h1) \"halifax\" buoy Herring Cove, Nova Scotia (see https://www.smartatlantic.ca/station_alt.html?id=halifax) \"hkb\" buoy near Meagher's Beach, Nova Scotia (see https://www.smartatlantic.ca/station_alt.html?id=halifax_hk4) \"saint_john\" buoy Bay Fundy, near St John, New Brunswick (see https://www.smartatlantic.ca/station_alt.html?id=saintjohn) \"saint_johns\" buoy near St John's Harbour, Newfoundland (see https://www.smartatlantic.ca/station_alt.html?id=stjohns)","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download buoy data — dod.buoy","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.buoy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download buoy data — dod.buoy","text":"","code":"# Show significant wave height in Halifax Harbour over past 28 days. if (interactive()) { # sidestep a pkgdown::build_site() error     # NOTE: data file is removed at end, to pass CRAN checks     library(dod)     destdir <- tempdir()     file <- dod.buoy(\"smartatlantic\", \"h1\", destdir = destdir)     col.names <- strsplit(readLines(file, 1), \",\")[[1]]     d <- read.csv(file, skip = 2, col.names = col.names)     d$t <- as.POSIXct(d$time, tz = \"UTC\", format = \"%Y-%m-%dT%H:%M:%SZ\")     look <- d$t > (max(d$t, na.rm = TRUE) - 28 * 86400)     plot(d$t[look], d$wave_ht_sig[look],         type = \"l\", xaxs = \"i\",         xlab = \"\", ylab = \"Sig. Wave Ht. [m]\"     )     unlink(destdir, recursive = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a coastline File — dod.coastline","title":"Download a coastline File — dod.coastline","text":"Constructs query NaturalEarth server (see reference 1) download coastline data (lake data, river data, etc) three resolutions.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a coastline File — dod.coastline","text":"","code":"dod.coastline(   resolution,   item = \"coastline\",   destdir = \".\",   destfile,   server = \"naturalearth\",   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a coastline File — dod.coastline","text":"resolution character value specifying desired resolution. permitted choices \"10m\" (1:10M resolution, detailed), \"50m\" (1:50M resolution) \"110m\" (1:110M resolution). resolution supplied, \"50m\" used. item character value indicating quantity downloaded. normally one \"coastline\", \"land\", \"ocean\", \"rivers_lakes_centerlines\", \"lakes\", NaturalEarth server types, advanced users can discover names inspecting URLs links NaturalEarth site, use item. item supplied, defaults \"coastline\". destdir character value indicating directory store downloaded files. destfile optional name destination file. provided, function creates reasonable name. server character value specifying server supply data. moment, permitted value \"naturalearth\", default server supplied. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a coastline File — dod.coastline","text":"character value indicating (ziip) filename result, empty string, problem.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download a coastline File — dod.coastline","text":"NaturalEarth website https://www.naturalearthdata.com files available e.g. https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download a coastline File — dod.coastline","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.coastline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a coastline File — dod.coastline","text":"","code":"# Download, unzip, read file, and then erase (as per CRAN policies) if (interactive()) { # this is a problem for pkgdown::build_site()     library(dod)     # NOTE: data file is removed at end, to pass CRAN checks     destdir <- tempdir()     zip <- dod.coastline(destdir = destdir, debug = 3)     unzip(zip, exdir = destdir)     list.files(destdir) # note the .shp file     shpfile <- list.files(destdir, \".shp$\", full.names = TRUE)     if (requireNamespace(\"oce\", quietly = TRUE)) {         library(oce)         cl <- read.coastline(shpfile, type = \"shapefile\")         plot(cl)     }     unlink(destdir, recursive = TRUE, force = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bats.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CTD data from the Bermuda Atlantic Time Series program (BROKEN) — dod.ctd.bats","title":"Download CTD data from the Bermuda Atlantic Time Series program (BROKEN) — dod.ctd.bats","text":"NOTE: function become useless 2024-12-17, author noticed BATS website longer provided interface suitable programmatical downloads. Please visit https://bios.asu.edu/bats/bats-data use mouse find whatever data seek. , friend.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CTD data from the Bermuda Atlantic Time Series program (BROKEN) — dod.ctd.bats","text":"","code":"dod.ctd.bats()"},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"dod.ctd.bbmp can retrieve index files data files Bedford Basin Mooring Project (BBMP). Since naming convention data files may alter year year, important start downloading index first, using dod.ctd.bbmp.index first, determine file interest; see ‘Examples’.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"","code":"dod.ctd.bbmp(   year,   ID = NULL,   direction = \"DN\",   server = paste0(\"https://cioosatlantic.ca/erddap/files/\",     \"bio_atlantic_zone_monitoring_program_ctd/\",     \"Bedford%20Basin%20Monitoring%20Program\"),   file = NULL,   destdir = \".\",   age = 0,   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"year numeric character value specifying year interest. provided, defaults current year. ID character value indicating station name. usually form like 001_1, years also profiles IDs like 001_01, well 001_1. Using dod.ctd.bbmp.index() discover IDs usually works, fails, explore webserver defined server parameter, check. direction character value indicating direction cast, either \"DN\" (default) \"\". server character value indicating base name server. may change time. file character value giving name used downloaded file.  NULL (default) filename remote data server. destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"dod.ctd.bbmp returns character value naming file retrieved. See ‘Examples’ section example typical workflow.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"historical-note","dir":"Reference","previous_headings":"","what":"Historical Note","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"Sometime prior April 2025, DFO server format data files changed, necessitated changes dod.ctd.bbmp(). Also, clarity use, new function dod.ctd.bbmp.index() added .","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download CTD data from the Bedford Basin Mooring Project — dod.ctd.bbmp","text":"","code":"# Download and study first BBMP CTD file of year 2024 if (interactive()) { # sidestep a pkgdown::build_site() error     library(dod)     # Note: cannot specify year=2025 because the URL is differently constructed     index <- dod.ctd.bbmp.index(year = \"2024\")     destdir <- tempdir() # get temporary storage     ctdFile <- dod.ctd(\"BBMP\",         year = index$year[1], ID = index$ID[1],         direction = \"DN\", destdir = destdir     )     # Use oce to read, summarize and plot the data.     library(oce)     ctd <- read.netcdf(ctdFile) |>         rename() |>         as.ctd()     summary(ctd)     plot(ctd)     unlink(destdir, recursive = TRUE) # clean up temporary storage }"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Download an index of BBMP files — dod.ctd.bbmp.index","title":"Download an index of BBMP files — dod.ctd.bbmp.index","text":"Download index BBMP files available specified year. done analysing webpage data server, likely fail format webpage changed. Please inform developers find failure, can try make changes.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download an index of BBMP files — dod.ctd.bbmp.index","text":"","code":"dod.ctd.bbmp.index(   year,   server = paste0(\"https://cioosatlantic.ca/erddap/files/\",     \"bio_atlantic_zone_monitoring_program_ctd/\",     \"Bedford%20Basin%20Monitoring%20Program\"),   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download an index of BBMP files — dod.ctd.bbmp.index","text":"year integer character value indicating year interest. Note year 2025 work, server supplies information year pattern match years. Since pattern appears temporary, present code set handle . server character value indicating base name server. may change time. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download an index of BBMP files — dod.ctd.bbmp.index","text":"dod.ctd.bbmp.index returns data frame columns named year, ID, direction. elements may supplied parameters name dod.ctd.bbmp().","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.bbmp.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download an index of BBMP files — dod.ctd.bbmp.index","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CTD data from the GTSPP server — dod.ctd.gtspp","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"function downloads CTD data GRSPP server https://www.ncei.noaa.gov/data/oceans/gtspp/bestcopy/. website somewhat challenging use; see ‘Details’.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"","code":"dod.ctd.gtspp(   basin,   year,   month,   file = NULL,   destdir = \".\",   index = FALSE,   nc = NULL,   age = 0,   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"basin character value indicating ocean basin data acquired.  must one \"\", \"pa\" \"\", Atlantic, Pacific Indian basins, respectively. NB. basin ignored nc #' provided, full URL. year integer value giving year data acquired. NB. year ignored nc #' provided, full URL. month integer character value giving month data acquired. character form, two-digit value required, first digit \"0\" early months year. NB. month ignored nc #' provided, full URL. file character value giving name used downloaded file. destdir character value indicating directory store downloaded files. index boolean value indicating whether index downloaded. FALSE default. Note nc ignored index TRUE. NB. index ignored nc #' provided, full URL. nc character value either naming netcdf file directory inferred basin, year month, URL leads directly file.  latter case recognized nc starting \"http\". Note index ignored nc provided.  See “Examples”. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"dod.ctd.gtspp() returns local name downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":".zip files provided NCEI server readible macOS machine, might also indicate problems machines.  Therefore, inventory files read .txt format, increases download read time order magnitude.","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.gtspp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download CTD data from the GTSPP server — dod.ctd.gtspp","text":"","code":"if (interactive()) { # sidestep a pkgdown::build_site() error     # Two examples are shown here.  The first specifies the remote file by a full     # URL, and the second infers such a URL from a subset of an index file. Since     # downloading an index is slow, a common approach is to combine the approaches,     # re-downloading the index perhaps only once a week to gain access to the most     # recent data.      library(dod)     library(oce)     library(ncdf4)      # First, define a function to read, summarize and plot CTD     # data stored in a netcdf file.     process <- function(datafile) {         nc <- nc_open(datafile)         S <- ncvar_get(nc, \"salinity\")         T <- ncvar_get(nc, \"temperature\")         z <- ncvar_get(nc, \"z\")         lon <- ncvar_get(nc, \"longitude\")         lat <- ncvar_get(nc, \"latitude\")         p <- swPressure(z, lat)         ctd <- as.ctd(S, T, p, longitude = lon, latitude = lat)         summary(ctd)         plot(ctd)     }      # Example A: get a data file from a known URL.     url <- paste0(         \"https://www.ncei.noaa.gov/data/oceans/\",         \"gtspp/bestcopy/atlantic/2022/01/gtspp_47477452_te_111.nc\"     )     dataFileA <- dod.ctd.gtspp(nc = url)     # above is equivalent to dod.ctd(\"at\", 2022, 01, nc=\"gtspp_47477452_te_111.nc\")     process(dataFileA)      # Example B: get an index, find a file of interest, and then get it     # Get an index file for Atlantic Ocean observations in January 2022.     ## # EG https://www.ncei.noaa.gov/data/oceans/gtspp/bestcopy/inventory/at198501_gtsppinv.zip     indexFile <- dod.ctd.gtspp(basin = \"at\", year = 2022, month = 1, index = TRUE)     col.names <- strsplit(gsub(\"#\", \"\", readLines(indexFile, n = 1L)), \",\")[[1]]     index <- read.csv(indexFile, skip = 1L, col.names = col.names, header = FALSE)     # Plot sampling locations near Halifax, Nova Scotia     if (requireNamespace(\"ocedata\", quietly = TRUE)) {         data(coastlineWorldFine, package = \"ocedata\")         hlon <- -63.5728         hlat <- 44.6476         plot(coastlineWorldFine, clongitude = hlon, clatitude = hlat, span = 2000)         points(index$longitude, index$latitude, col = 4)         # Focus on the point nearest Halifax         # https://www.ncei.noaa.gov/data/oceans/gtspp/bestcopy/atlantic/\\         # 2022/01/gtspp_47477452_te_111.nc         dist <- geodDist(index$longitude, index$latitude, hlon, hlat)         focus <- index[which.min(dist), ]         dataFile <- dod.ctd.gtspp(nc = focus$data_URL)         process(dataFile)     } }"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CTD data — dod.ctd","title":"Download CTD data — dod.ctd","text":"function downloads CTD data various programs.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CTD data — dod.ctd","text":"","code":"dod.ctd(program = NULL, ...)"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download CTD data — dod.ctd","text":"program character value naming program (one listthem). ... extra arguments passed dod.ctd.bats(), dod.ctd.bbmp() dod.ctd.gtspp().","code":""},{"path":[]},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"dod.ctd.itp() downloads CTD data Woods Hole Oceanographic Institutions Ice-Thethered Profile program https://www2.whoi.edu/site/itp/.  Note server provide searchable index, users need visit website https://www2.whoi.edu/site/itp/data/ determine IDs interest. Please take note ‘Historical update’ section, regarding whether supply ID (without info) supply url.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"","code":"dod.ctd.itp(   ID,   info = FALSE,   url,   file = NULL,   destdir = \".\",   age = 0,   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"ID integer specifying ID profiler interest. info logical value.  info FALSE, default, dod.ctd.itp() downloads zip-format file can expanded directory holds data file profile made profiler given ID.  name zip file returned. (file must unzipped access data; unzip() convenient way .) hand, info TRUE, nothing downloaded, dod.ctd.itp() returns URL holding information profiler. url optional character value supplying full URL sought-file.  supplied, ID info ignored.  See “Historical notes” learn parameter. file character value giving name used downloaded file.  file NULL, default, filename server used. destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"dod.ctd.itp() returns full pathname downloaded zip file, URL information site, depending value info.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"historical-notes","dir":"Reference","previous_headings":"","what":"Historical notes","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"2025-08-19. url parameter added, discovered organizational structure remote-server directories changed compared upon code ID info written. possible code handles ID info updated new organizational structure, , even , users may better-exploring server website isolating files interest way. Supplying url also advantageous lets user control version data downloaded, “Worked Example”.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"worked-example","dir":"Reference","previous_headings":"","what":"Worked Example","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"Note following code run package build process, downloads large file. last run, resultant PNG created, 2025-08-19.","code":"library(dod) library(oce) url <- paste0(     \"https://scienceweb.whoi.edu/itp/data/\",     \"itpsys137/itp137_level2.nc\" ) nc <- dod.ctd.itp(url = url, age = 1) d <- oce::read.netcdf(nc) time <- as.POSIXct(\"1970-01-01\") + 86400 * d[[\"profile_info/time\"]] col <- cut(time, \"year\") lat <- d[[\"profile_info/latitude\"]] lon <- d[[\"profile_info/longitude\"]] png(\"itp.png\") data(coastlineWorld) par(mar = c(2, 2, 2, 1)) mapPlot(coastlineWorld,     longitudelim = c(-180, 180), latitudelim = c(70, 90),     projection = \"+proj=stere +lat_0=90 +lat_ts=90 +lon_0=-130\",     col = \"lightgray\" ) mapPoints(lon, lat, cex = 0.3, pch = 20, col = f)"},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.ctd.itp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download CTD data from the Ice-Tethered Profiler program — dod.ctd.itp","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file with error checking — dod.download","title":"Download a file with error checking — dod.download","text":"dod.download() mainly intended use functions dod package.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file with error checking — dod.download","text":"","code":"dod.download(   url = NULL,   file = NULL,   destdir = \".\",   age = 0,   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file with error checking — dod.download","text":"url character value giving web address file downloaded. different values different file types. file character value giving name used downloaded file. destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file with error checking — dod.download","text":"dod.download returns character value holding full name file, including path destdir.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.html","id":null,"dir":"Reference","previous_headings":"","what":"A package for downloading publically available data. — dod","title":"A package for downloading publically available data. — dod","text":"dod package provides tools downloading Advanced Microwave Scanning Radiometer (AMSR), buoy, coastline, CTD (BATS, BBMP, GTSPP), meteorological, tidal, topographic data.","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A package for downloading publically available data. — dod","text":"Maintainer: Dan Kelley Dan.Kelley@Dal.Ca (ORCID) Authors: Annie Howard Jaimie Harbin Jaimie.Harbin@dfo-mpo.gc.ca (ORCID)","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":null,"dir":"Reference","previous_headings":"","what":"Download meteorological timeseries data — dod.met","title":"Download meteorological timeseries data — dod.met","text":"dod.met() attempts download data Environment Canada's historical-data website, cache files locally. Lacking published API, function must rely reverse-engineering queries handled web server.  reason, brittle.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download meteorological timeseries data — dod.met","text":"","code":"dod.met(   id,   year,   month,   deltat,   type = \"xml\",   destdir = \".\",   age = 1,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download meteorological timeseries data — dod.met","text":"id number giving \"Station ID\" station interest. provided, id defaults 43405, Halifax Dockyard. (Previously, default 6358, Halifax International Airport, March 2024 noticed 6358 held data.) See “Details”. year number giving year interest. Ignored unless deltat \"hour\". year given, defaults present year. month number giving month interest. Ignored unless deltat \"hour\". month given, defaults present month.  special case, neither year month given, first day month, dod.met() goes back one month, avoid returning file data. deltat optional character string indicating time step desired dataset. may \"hour\" \"month\". deltat given, defaults \"hour\". type character value indicating type file download, either \"xml\" (default) XML file \"csv\" CSV file. destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download meteorological timeseries data — dod.met","text":"dod.met() returns character value holding full pathname downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download meteorological timeseries data — dod.met","text":"function fails, users might try using Gavin Simpson's canadaHCD package (reference 2) weathercan package (reference 3).","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download meteorological timeseries data — dod.met","text":"Environment Canada website Historical Climate Data https://climate.weather.gc.ca/index_e.html Gavin Simpson's canadaHCD package GitHub https://github.com/gavinsimpson/canadaHCD Weathercan package https://github.com/ropensci/weathercan/tree/main","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download meteorological timeseries data — dod.met","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download meteorological timeseries data — dod.met","text":"","code":"# Meteorological data for Halifax, Nova Scotia. if (interactive()) { # sidestep a pkgdown::build_site() error     # NOTE: data file is removed at end, to pass CRAN checks     library(dod)     destdir <- tempdir()     metFile <- dod.met(43405, destdir = destdir)     if (requireNamespace(\"oce\", quietly = TRUE) &&         requireNamespace(\"XML\", quietly = TRUE)) {         library(oce)         met <- read.met(metFile)         t <- met[[\"time\"]]         p <- met[[\"pressure\"]]         oce.plot.ts(t, p, ylab = \"Atm. Pressure [Pa]\")     }     unlink(destdir, recursive = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Index of Canadian Meteorological Stations — dod.met.index","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"Look information Canadian meteorological station, fuzzy search information stored gc.ca website. main use find station ID, used dod.met().","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"","code":"dod.met.index(   name,   max.distance = 0.1,   url = paste0(\"https://collaboration.cmc.ec.gc.ca/cmc/climate/\",     \"Get_More_Data_Plus_de_donnees/Station%20Inventory%20EN.csv\"),   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"name character value use name search. search done using agrep() supplied max.distance value ignore.case set TRUE. max.distance numerical value passed agrep() station-name search. url URL source file.  default value changed time, owing changes Government Canada website. example, 2024-05-06, link Reference 1 worked. However, author noticed 2025-07-23 URL provide files held \"Climate ID\" column, default changed Reference 2 date. Users asked post issue github.com/dankelley/dod/issues website, find dod.met.index() either reports errors, data frame returned function lacks column labelled Climate ID, since values column needed id parameter dod.met(). quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"source file web location named url parameter. (Please contact author, default value fails. known work May 2024, agency might change file location format time.) results data frame information easy interpret.  use dod.met(), ID field use named \"Climate.ID\".  See “Examples” might interest hourly data.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"Default url 2024-05-06 2025-07-23: https://dd.weather.gc.ca/climate/observations/climate_station_list.csv. Default url 2025-07-23 onward: paste0(\"https://collaboration.cmc.ec.gc.ca/cmc/climate/\", \"Get_More_Data_Plus_de_donnees/Station%20Inventory%20EN.csv).","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Index of Canadian Meteorological Stations — dod.met.index","text":"","code":"if (interactive()) { # sidestep a pkgdown::build_site() error     # Get index of meteorological data for Halifax, N.S.     library(dod)     i <- dod.met.index(\"halifax\")     names(i) # see what's in these files     i[, c(\"Province\", \"Name\", \"Climate.ID\")]     # focus on the ones in Nova Scotia     i <- i[grep(\"nova scotia\", i$Province, ignore.case = TRUE), ]     # Show start/end times for hourly data.     i[, c(\"Name\", \"Station.ID\", \"HLY.First.Year\", \"HLY.Last.Year\")]     #>                           Name Station.ID HLY.First.Year HLY.Last.Year     #> 8196                   HALIFAX       6355             NA            NA     #> 8197                   HALIFAX       6356           1953          1963     #> 8198           HALIFAX CITADEL       6357             NA            NA     #> 8199           HALIFAX COMMONS      49128           2010          2011     #> 8200          HALIFAX DOCKYARD      43405           2004          2025     #> 8201 HALIFAX STANFIELD INT\\'L A      53938           2019          2025     #> 8202 HALIFAX STANFIELD INT\\'L A       6358           1961          2012     #> 8203 HALIFAX STANFIELD INT\\'L A      50620           2012          2025     #> 8204          HALIFAX KOOTENAY      43124           2004          2025     #> 8205      HALIFAX WINDSOR PARK      43403           2004          2025 }"},{"path":"https://dankelley.github.io/dod/reference/dod.met.sounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Download sounding data — dod.met.sounding","title":"Download sounding data — dod.met.sounding","text":"Download atmospheric sounding file University Wyoming Department Atmospheric science website https://weather.uwyo.edu/upperair/sounding.html.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.sounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download sounding data — dod.met.sounding","text":"","code":"dod.met.sounding(   station = \"73110\",   year,   month,   day,   region = \"naconf\",   destdir = \".\",   age = 0,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.met.sounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download sounding data — dod.met.sounding","text":"station character value indicating station identifier.  default station near Halifax, Nova Scotia. year integer character value indicating year.  supplied, present year used. month integer character value indicating month. supplied, present month used. day integer character value indicating day supplied, present day used. region character value indicating region. example, stations north America seem associated region \"naconf\" (default). destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.sounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download sounding data — dod.met.sounding","text":"local name downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.met.sounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download sounding data — dod.met.sounding","text":"","code":"if (interactive()) { # sidestep a pkgdown::build_site() error     # NOTE: data file is removed at end, to pass CRAN checks     # Download     destdir <- tempdir()     station <- \"73110\"     year <- \"2023\"     month <- \"01\"     day <- \"08\"     file <- dod.met.sounding(station, year = year, month = month, day = day, destdir = tempdir)     # Read data, extracting the table crudely.     lines <- readLines(file)     start <- grep(\"<PRE>\", lines)[1]     end <- grep(\"<\/PRE>\", lines)[1]     table <- lines[seq(start + 5, end - 1)]     col.names <- strsplit(gsub(\"^ [ ]*\", \"\", lines[start + 2]), \"[ ]+\")[[1]]     # Must read in fixed-width format because missing data are blanked out     data <- read.fwf(         file = textConnection(table),         widths = rep(7, 11), col.names = col.names     )     # Plot mixing ratio variation with height     plot(data$MIXR, data$HGHT,         type = \"l\", cex = 0.5, pch = 20, col = 4,         xlab = \"Mixing Ratio\", ylab = \"Height [m]\"     )     unlink(destdir, recursive = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and read a river water-level file — dod.river","title":"Download and read a river water-level file — dod.river","text":"saveFile TRUE, file saved later use.  first line header. column named \"Date\" may decoded POSIX time value using lubridate::ymd_hms().","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and read a river water-level file — dod.river","text":"","code":"dod.river(   id = \"01EJ001\",   region = \"NS\",   interval = \"daily\",   saveFile = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and read a river water-level file — dod.river","text":"id character value indicating ID desired station. may discovered using dod.river.index() first. defaults \"01EJ001\", Sackville River Bedford. region character value indicating province territory river gauge sited. defaults \"NS. interval character value, either \"daily\" `\"hourly\", indicating time interval desired. (first seems yield data current month, second seems yield data since last 1 2 days.) saveFile logical value indicating whether save file later use. can handy server provide archived data. filename server, main part filename ending timestamp. file name printed processing, may read later read.csv(), time column decoded lubridate::ymd_hms(); perhaps server information meanings columns, perhaps able guess. debug integer indicating level debugging information printed processing.  default, debug=0, means work quietly.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and read a river water-level file — dod.river","text":"data frame containing data, columns named \"time\" \"level\" (m), \"grade\" \"discharge\" (m^3/s). (Note files contain columns; want , save file read explained ‘Details’.)","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download and read a river water-level file — dod.river","text":"Gore, James ., James Banning. “Chapter 3 - Discharge Measurements Streamflow Analysis.” Methods Stream Ecology, Volume 1 (Third Edition), edited F. Richard Hauer Gary . Lamberti, 49–70. Boston: Academic Press, 2017. https://doi.org/10.1016/B978-0-12-416558-8.00003-2.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and read a river water-level file — dod.river","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and read a river water-level file — dod.river","text":"","code":"library(oce) #> Loading required package: gsw library(dod) dir <- dod.river.index() # defaults to Sackville River at Bedford data <- dod.river(id = dir$id)  # Plot a 3-panel summary graph; see e.g. Gore and Banning (2017) for more # information on discharge.  layout(matrix(c(1, 3, 2, 3), 2, 2, byrow = TRUE), width = c(0.6, 0.4)) oce.plot.ts(data$time, data$level,     xaxs = \"i\",     xlab = \"\", ylab = \"Level [m]\",     drawTimeRange = FALSE, grid = TRUE ) mtext(sprintf(\"%s (%.4fN %.4fE)\", dir$name, dir$latitude, dir$longitude),     line = 0.2, cex = 0.7 * par(\"cex\") ) oce.plot.ts(data$time, data$discharge,     xaxs = \"i\",     xlab = \"\", ylab = expression(\"Discharge [\" * m^3 / s * \"]\"),     drawTimeRange = FALSE, grid = TRUE ) plot(data$discharge, data$level,     type = \"l\",     xlab = expression(\"Discharge [\" * m^3 / s * \"]\"), ylab = \"Level [m]\" )"},{"path":"https://dankelley.github.io/dod/reference/dod.river.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire a directory of river water-level files — dod.river.index","title":"Acquire a directory of river water-level files — dod.river.index","text":"examples, see dod.river().","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire a directory of river water-level files — dod.river.index","text":"","code":"dod.river.index(url, name, debug = 0)"},{"path":"https://dankelley.github.io/dod/reference/dod.river.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire a directory of river water-level files — dod.river.index","text":"url character value indicating URL station listing. provided, defaults https://hpfx.collab.science.gc.ca/today/hydrometric/doc/hydrometric_StationList.csv URL code expected work. name character value indicating name station information sought.  may regular expression. provided, \"sackville.*bedford\" used. Set name NULL get listing stations. debug integer indicating level debugging information printed processing.  default, debug=0, means work quietly.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acquire a directory of river water-level files — dod.river.index","text":"data frame holding columns named \"id\", \"name\", \"latitude\", \"region\" `\"tz\", one row selected station.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Acquire a directory of river water-level files — dod.river.index","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.usgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download American river-gauge data from USGS — dod.river.usgs","title":"Download American river-gauge data from USGS — dod.river.usgs","text":"Download American river-gauge data USGS","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.usgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download American river-gauge data from USGS — dod.river.usgs","text":"","code":"dod.river.usgs(id = \"03242350\", start = NULL, end = NULL, destfile = NULL)"},{"path":"https://dankelley.github.io/dod/reference/dod.river.usgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download American river-gauge data from USGS — dod.river.usgs","text":"id character value giving numeric code gauge. defaults river Ohio. start indication start time requested data window. provided, may (non-ambiguous) character form , better, POSIXt object. \"UTC\" timezone assumed.  provided, start defaults 1 week present time. end start, instead end date. destfile optional character value indicating desired name downloaded file.  NULL (default) filename constructed contains station ID start/end dates.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.usgs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download American river-gauge data from USGS — dod.river.usgs","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.river.usgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download American river-gauge data from USGS — dod.river.usgs","text":"","code":"library(dod) destfile <- tempfile(\"river\", fileext = \".tsv\") file <- dod.river.usgs(start = \"2025-08-01\", end = \"2025-08-08\", destfile = destfile) lines <- readLines(destfile) file.remove(destfile) # needed for tests on CRAN #> [1] TRUE skip <- 1 + grep(\"agency_cd\", lines) data <- read.delim(text = lines, skip = skip, sep = \"\\t\", header = FALSE) # The data at this site, if downloaded during daylight-savings # time, are offset from UTC by 4 hours. I'm not sure how to make the server # return in UTC. time <- as.POSIXct(data$V3, tz = \"UTC\") + 4 * 3600 # Convert from feet to metres height <- 0.3048 * data$V5 plot(time, height,     type = \"l\", xlab = \"Day in year 2025\",     ylab = \"River Height [m]\" ) mtext(gsub(\"#[ ]*\", \"\", lines[grep(\"#    USGS \",lines)]))"},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":null,"dir":"Reference","previous_headings":"","what":"Download tide-gauge data — dod.tideGauge","title":"Download tide-gauge data — dod.tideGauge","text":"dod.tideGauge() downloads tide-gauge data either Canadian (CHS) American (NOAA) tide gauges.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download tide-gauge data — dod.tideGauge","text":"","code":"dod.tideGauge(   ID = NULL,   variable = \"water_level\",   agency = \"CHS\",   start = NULL,   end = NULL,   resolution = NULL,   file = NULL,   destdir = \".\",   age = 0,   quiet = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download tide-gauge data — dod.tideGauge","text":"ID character (possibly integer) value specifying numeric identifier tide gauge. Canadian data, either station number station name (e.g. number 491 corresponds \"Bedford Institute\" station).  American data, numerical code. variable character value indicating name variable downloaded.  three types.  (1) \"water_level\" (default) yields observed water level. called \"wlo\" CHS server \"water_level\" NOAA server (latter, see also resolution). (2) \"predictions\" yields tidal predictions. called \"wlp\" CHS \"predictions\" NOAA. (3) \"metadata\" yields list containing information station, code number, official name, datum, etc. agency character value indicating agency data sought. Use \"CHS\" Canadian tide gauges (default), \"NOAA\" American tide gauges. start, end POSIXt times character values can converted times (via .POSIXct() tz=\"UTC\") indicate time interval requested data.  end specified, present time used.  start provided, set present time minus 7 days.  start numeric value, interpreted number days go back time end time. resolution character value indicating time resolution. handled differently two choices agency. (1) agency=\"CHS\", choices \"ONE_MINUTE\", \"THREE_MINUTES\" (default), \"FIVE_MINUTES\", \"FIFTEEN_MINUTES\", \"SIXTY_MINUTES\".  (2) agency=\"NOAA\", choices \"ONE_MINUTE\", \"SIX_MINUTES\" \"SIXTY_MINUTES\" (default). file character value indicating name used downloaded data.  provided, constructed e.g. \"tide_A_N_S_E_R_V.csv\" value agency argument, N station ID number, S E start end dates written 8-digit format (.e. sans \"-\" characters), R resolution minutes, V variable name. destdir character value indicating directory store downloaded files. age numerical value indicating time interval, days. file downloaded server already exists locally, created less age days past, downloaded .  Setting age=0 forces download, existing files always updated. contrast, setting age negative number prevents updating files already exist locally, regardless age. quiet logical value, passed curl::curl_download(), downloading.  TRUE (default), work done quietly. version version 0.1.12, parameter called silent, renamed match corresponding argument curl::curl_download(), may familiar users. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download tide-gauge data — dod.tideGauge","text":"dod.tideGauge() returns list, value \"metadata\" agency \"CHS\"; otherwise returns file name (full path included).  CHS case constructed filename, since CHS server provides data, files.  NOAA case, downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download tide-gauge data — dod.tideGauge","text":"Downloads done either Canadian Hydrographic Service (CHS) American National Oceanographic Atmospheric Agency (NOAA), respectively (see References 1 2). resultant data saved either constructed filenames, filenames provided user; either case, recent file already exists indicated name, data downloaded. NOAA files, water level predictions provided time sequence, CHS files, case, e.g. predictions (author's tests) 15 minute intervals, starting hour marker, observations may variety times, depending start end. Therefore, numerical comparision CHS data require interpolation (see ‘Examples’).","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download tide-gauge data — dod.tideGauge","text":"https://api.iwls-sine.azure.cloud-nuage.dfo-mpo.gc.ca/swagger-ui/index.html https://api.tidesandcurrents.noaa.gov/api/prod/","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download tide-gauge data — dod.tideGauge","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.tideGauge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download tide-gauge data — dod.tideGauge","text":"","code":"# Download and plot tide-guage data for Halifax Harbour library(dod) library(oce) destdir <- tempfile() # removed at the end, since CRAN requires that dir.create(destdir) ofile <- dod.tideGauge(491, destdir = destdir) pfile <- dod.tideGauge(491, \"predictions\", destdir = destdir) O <- read.csv(ofile) O$time <- as.POSIXct(O$Date.Time, \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\") P <- read.csv(pfile) P$time <- as.POSIXct(P$Date.Time, \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\") # Top panel: observation (black) and prediction (gray) par(mfrow = c(2, 1)) oce.plot.ts(O$time, O$Water.Level, ylab = \"Water Level [m]\", xaxs = \"i\") lines(P$time, P$Predictions, col = \"gray\", type = \"l\") # Bottom panel: misfit. Note the interpolation to observation time. misfit <- O$Water.Level - approx(P$time, P$Predictions, O$time)$y oce.plot.ts(O$time, misfit, ylab = \"Deviation [m]\", xaxs = \"i\")  unlink(destdir, recursive = TRUE)"},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Cache a topo File — dod.topo","title":"Download and Cache a topo File — dod.topo","text":"Topographic data downloaded data server holds ETOPO1 dataset (Amante, C. B.W. Eakins, 2009), saved netCDF file whose name specifies data request, file name already present local file system.  return value name data file, typical use filename call read.topo() oce package. Given rules file naming, subsequent calls dod.topo() identical parameters simply return name cached file, assuming user deleted meantime.  Note dod.topo() uses \"terra\" \"ncdf4\" packages, error reported available.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Cache a topo File — dod.topo","text":"","code":"dod.topo(   west,   east,   south,   north,   resolution = 4,   destdir = \".\",   destfile,   server = \"https://gis.ngdc.noaa.gov\",   debug = getOption(\"dodDebug\", 0L) )"},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Cache a topo File — dod.topo","text":"west, east numeric values limits data-selection box, degrees. converted -180 180 degree notation, needed. , west rounded nearest 1/100th degree, east rounded nearest 1/100th degree. results operations used constructing query NOAA data server. south, north latitude limits, treated way corresponds longitude limits. resolution numeric value grid spacing, geographical minutes. default value 4 minutes, corresponding 4 nautical miles (approx. 7.4km) north-south direction, less east-west direction. destdir character value indicating directory store downloaded files. destfile optional name destination file. provided, function creates reasonable name. server character value specifying base download URL constructed.  unlikely value default work, unless similarly-constructed mirrored site. debug integer value indicating level debugging. exceeds 0, debugging messages printed. value passed related functions, 1 subtracted pass.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Cache a topo File — dod.topo","text":"String indicating full pathname downloaded file.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Cache a topo File — dod.topo","text":"specified longitude latitude limits rounded 2 digits (corresponding footprint approximately 1km), used server request. resultant request generate 1 row column result, dod.topo() generates error message stops.","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"historical-note-relating-to-noaa-server-changes","dir":"Reference","previous_headings":"","what":"Historical note relating to NOAA server changes","title":"Download and Cache a topo File — dod.topo","text":"2022 November 13: updated new NOAA database, 1/4-minute resolution (marked improvement previous 1-minute resolution).  revision framed along similar changes marmap::getNOAAbathy() made earlier today. Thanks Clark Richards pointing ! 2020 May 31: updated change NOAA query structure, taking hints marmap::getNOAAbathy().","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download and Cache a topo File — dod.topo","text":"Amante, C. B.W. Eakins, 2009. ETOPO1 1 Arc-Minute Global Relief Model: Procedures, Data Sources Analysis. NOAA Technical Memorandum NESDIS NGDC-24. National Geophysical Data Center, NOAA. doi:10.7289/V5C8276M","code":""},{"path":[]},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and Cache a topo File — dod.topo","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/dod.topo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Cache a topo File — dod.topo","text":"","code":"# Download and plot topographic data if (interactive()) { # sidestep a pkgdown::build_site() error     library(oce)     destdir <- tempdir()     topoFile <- dod.topo(         west = -66, east = -60, south = 43, north = 47,         resolution = 1, destdir = destdir     )     topo <- read.topo(topoFile)     imagep(topo, zlim = c(-400, 400), col = oceColorsTwo, drawTriangles = TRUE)     if (requireNamespace(\"ocedata\", quietly = TRUE)) {         data(coastlineWorldFine, package = \"ocedata\")         lines(coastlineWorldFine[[\"longitude\"]], coastlineWorldFine[[\"latitude\"]])     }     unlink(destdir, recursive = TRUE) }"},{"path":"https://dankelley.github.io/dod/reference/dodDebug.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug dod package functions — dodDebug","title":"Debug dod package functions — dodDebug","text":"function used throughout dod package provide information processing done.","code":""},{"path":"https://dankelley.github.io/dod/reference/dodDebug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug dod package functions — dodDebug","text":"","code":"dodDebug(debug = 0, ..., unindent = 0, sep = \"\")"},{"path":"https://dankelley.github.io/dod/reference/dodDebug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debug dod package functions — dodDebug","text":"debug integer valaue indicating level debugging. exceeds zero, ... passed cat(), printing. ... content passed cat(). unindent integer, left-indent level. Set X indent 2 space left. sep separation character, passed cat() displaying debugging messages.","code":""},{"path":"https://dankelley.github.io/dod/reference/monthNumberFromName.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert month name to number, returning NA if no match — monthNumberFromName","title":"Convert month name to number, returning NA if no match — monthNumberFromName","text":"Convert month name number, returning NA match","code":""},{"path":"https://dankelley.github.io/dod/reference/monthNumberFromName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert month name to number, returning NA if no match — monthNumberFromName","text":"","code":"monthNumberFromName(name)"},{"path":"https://dankelley.github.io/dod/reference/monthNumberFromName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert month name to number, returning NA if no match — monthNumberFromName","text":"name character value naming month, enough letters distinguish months.","code":""},{"path":"https://dankelley.github.io/dod/reference/monthNumberFromName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert month name to number, returning NA if no match — monthNumberFromName","text":"integer giving month number, e.g. \"Jan\" yields 1.","code":""},{"path":"https://dankelley.github.io/dod/reference/monthNumberFromName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert month name to number, returning NA if no match — monthNumberFromName","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and read a river water-level file — riverData","title":"Download and read a river water-level file — riverData","text":"saveFile TRUE, file saved later use.  first line header. column named \"Date\" may decoded POSIX time value using lubridate::ymd_hms().","code":""},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and read a river water-level file — riverData","text":"","code":"riverData(   id = \"01EJ001\",   region = \"NS\",   interval = \"daily\",   saveFile = FALSE,   debug = 0 )"},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and read a river water-level file — riverData","text":"id character value indicating ID desired station. may discovered using riverDirectory() first. defaults \"01EJ001\", Sackville River Bedford. region character value indicating province territory river gauge sited. defaults \"NS. interval character value, either \"daily\" `\"hourly\", indicating time interval desired. (first seems yield data current month, second seems yield data since last 1 2 days.) saveFile logical value indicating whether save file later use. can handy server provide archived data. filename server, main part filename ending timestamp. file name printed processing, may read later read.csv(), time column decoded lubridate::ymd_hms(); perhaps server information meanings columns, perhaps able guess. debug integer indicating level debugging information printed processing.  default, debug=0, means work quietly.","code":""},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and read a river water-level file — riverData","text":"data frame containing data, columns named \"time\" \"level\" m, \"discharge\" m^3/s. (Note files contain columns; want , save file read explained ‘Details’.)","code":""},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and read a river water-level file — riverData","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/reference/riverData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and read a river water-level file — riverData","text":"","code":"library(oce) #> Loading required package: gsw library(dod) dir <- riverDirectory() # defaults to Sackville River at Bedford data <- riverData(id = dir$id) # This 3-panel layout might be useful to river experts layout(matrix(c(1, 3, 2, 3), 2, 2, byrow = TRUE), width = c(0.6, 0.4)) oce.plot.ts(data$time, data$level,     xaxs = \"i\",     xlab = \"\", ylab = \"Level [m]\",     drawTimeRange = FALSE, grid = TRUE ) mtext(sprintf(\"%s (%.4fN %.4fE)\", dir$name, dir$latitude, dir$longitude),     line = 0.2, cex = 0.7 * par(\"cex\") ) oce.plot.ts(data$time, data$discharge,     xaxs = \"i\",     xlab = \"\", ylab = expression(\"Discharge [\" * m^3 / s * \"]\"),     drawTimeRange = FALSE, grid = TRUE ) with(data, plot(level, discharge, type = \"l\"))"},{"path":"https://dankelley.github.io/dod/reference/riverDirectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire a directory of river water-level files — riverDirectory","title":"Acquire a directory of river water-level files — riverDirectory","text":"examples, see riverData().","code":""},{"path":"https://dankelley.github.io/dod/reference/riverDirectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire a directory of river water-level files — riverDirectory","text":"","code":"riverDirectory(url, station, debug = 0)"},{"path":"https://dankelley.github.io/dod/reference/riverDirectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire a directory of river water-level files — riverDirectory","text":"url character value indicating URL station listing. provided, defaults https://hpfx.collab.science.gc.ca/today/hydrometric/doc/hydrometric_StationList.csv URL code expected work. station character value indicating name station information sought.  may regular expression. provided, \"sackville.*bedford\" used. Set station NULL get listing stations. debug integer indicating level debugging information printed processing.  default, debug=0, means work quietly.","code":""},{"path":"https://dankelley.github.io/dod/reference/riverDirectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acquire a directory of river water-level files — riverDirectory","text":"data frame holding columns named \"id\", \"name\", \"latitude\", \"region\" `\"tz\", one row selected station.","code":""},{"path":"https://dankelley.github.io/dod/reference/riverDirectory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Acquire a directory of river water-level files — riverDirectory","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0119","dir":"Changelog","previous_headings":"","what":"dod 0.1.19","title":"dod 0.1.19","text":"Fix problem dod.ctd.itp() adding new url parameter (issue #27) Fix problem dod.amsr() (issue #26)","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0119-1","dir":"Changelog","previous_headings":"","what":"dod 0.1.19","title":"dod 0.1.19","text":"dod.river.usgs() added download data American rivers USGS server (issue #25).","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0118","dir":"Changelog","previous_headings":"","what":"dod 0.1.18","title":"dod 0.1.18","text":"dod.met.index() handles new URL contains Station ID field, dod.met() compensates change Name field (issue #23). dod.met() dod.ctd.gtspp() permit specifying month name (issue #24).","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0117","dir":"Changelog","previous_headings":"","what":"dod 0.1.17","title":"dod 0.1.17","text":"dod.tideGauge() accepts resolution NOAA data (issue #22)","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0116","dir":"Changelog","previous_headings":"","what":"dod 0.1.16","title":"dod 0.1.16","text":"Add dod.ctd.bbmp.index() (issue #16).","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0115","dir":"Changelog","previous_headings":"","what":"dod 0.1.15","title":"dod 0.1.15","text":"Add dod.river.index() dod.river() (issue #16).","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0114","dir":"Changelog","previous_headings":"","what":"dod 0.1.14","title":"dod 0.1.14","text":"Update documentation show familial relationships downloading functions. Change dod.coastline() handle new server location noticed December 2024. Change dod.tideGauge() obey age parameter. Prevent documentation examples running non-interactive mode. seems way prevent pkgdown::build_site() error comes downloaded files. error actually warning, stops processing, tolerate . message gzfile() stating open compressed file. ’ve seen errors like discussion boards going back many years, related many things. idea problem , despite quite lot searching testing. like website showed plots, etc? Sure. want spend day aimlessly trying things searching web? much.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0113","dir":"Changelog","previous_headings":"","what":"dod 0.1.13","title":"dod 0.1.13","text":"Change dod.tideGauge() handle present-day DFO format (issue #12). Change dod.ctd.bats() simply report error BATS website (issue #15). Change examples longer download since causes problems pkgdown::build_site(). problem first noticed 2024-12-17.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0112","dir":"Changelog","previous_headings":"","what":"dod 0.1.12","title":"dod 0.1.12","text":"Change dod.amsr() default 4 days past, early morning, 3-day default fail files yet ready server. Also, change first parameter can Date time object, string can converted former. Switch download.file() RCurl::download_file(), former seen cause problems Windows machines. Rename silent argument quiet, match name used RCurl::download_file().","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0111","dir":"Changelog","previous_headings":"","what":"dod 0.1.11","title":"dod 0.1.11","text":"Add dod.met.index().","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-0110","dir":"Changelog","previous_headings":"","what":"dod 0.1.10","title":"dod 0.1.10","text":"Change dod.buoy() handle several buoys smartatlantic program.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-019","dir":"Changelog","previous_headings":"","what":"dod 0.1.9","title":"dod 0.1.9","text":"Change dod.met() default station 43405, since 2024-03-16 noticed older default longer held data.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-018","dir":"Changelog","previous_headings":"","what":"dod 0.1.8","title":"dod 0.1.8","text":"Change dod.tideGauge() accept number start.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-017","dir":"Changelog","previous_headings":"","what":"dod 0.1.7","title":"dod 0.1.7","text":"Add dod.ctd.itp().","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-016","dir":"Changelog","previous_headings":"","what":"dod 0.1.6","title":"dod 0.1.6","text":"Change dod.tideGauge() handle CHS NOAA downloads. links oce package removed, avoid circular dependencies.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-015","dir":"Changelog","previous_headings":"","what":"dod 0.1.5","title":"dod 0.1.5","text":"dod.tideGauge() added.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-014","dir":"Changelog","previous_headings":"","what":"dod 0.1.4","title":"dod 0.1.4","text":"Move project https://www.github.com/dankelley/dod future development. Improve dod.amsr().","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-013","dir":"Changelog","previous_headings":"","what":"dod 0.1.3","title":"dod 0.1.3","text":"Make dod.amsr() local, opposed call oce::download.amsr(). also changed major ways, data provider altered directory structure data format. , see https://github.com/dankelley/oce/issues/2124.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-012","dir":"Changelog","previous_headings":"","what":"dod 0.1.2","title":"dod 0.1.2","text":"Add age argument functions download.","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-011","dir":"Changelog","previous_headings":"","what":"dod 0.1.1","title":"dod 0.1.1","text":"Add dod.met.sounding().","code":""},{"path":"https://dankelley.github.io/dod/news/index.html","id":"dod-010","dir":"Changelog","previous_headings":"","what":"dod 0.1.0","title":"dod 0.1.0","text":"Initial version","code":""}]
